# Source of this pipeline code: https://github.com/paskausks/rust-bin-github-workflows
# MIT License - Copyright (c) 2019 Rihards Paskausks
# Modified by
# Copyright (c) 2020 Malte Janz

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

env:
  # Could, potentially automatically parse
  # the bin name, but let's do it automatically for now.
  RELEASE_BIN: ludtwig

  # Space separated paths to include in the archive.
  # Start relative paths with a dot if you don't want
  # paths to be preserved. Use "/" as a delimiter.
  RELEASE_ADDS: README.md LICENSE


jobs:
  create:
    name: Create
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
     - name: Create draft release
       id: create_release
       uses: actions/create-release@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         tag_name: ${{ github.ref }}
         release_name: Release ${{ github.ref }}
         draft: true
         prerelease: false
  
  
  build:
    name: Build draft release
    needs: [create]

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            type: application/gzip
            output_ending: .tar.gz
          - build: x86_64-apple-darwin
            os: macos-latest
            type: application/gzip
            output_ending: .tar.gz
          - build: x86_64-pc-windows-msvc
            os: windows-latest
            type: application/zip
            output_ending: .zip

    steps:
    - uses: actions/checkout@v2
    
    - name: Install latest stable Rust version
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    
    - uses: Swatinem/rust-cache@v1

    - name: Run cargo build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --verbose

    - name: Create artifact directory
      run: mkdir artifacts
    
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}

    - name: Create archive for Windows
      run: 7z a -tzip ./artifacts/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.build }}-${{ matrix.output_ending }} ./target/release/${{ env.RELEASE_BIN }}.exe ${{ env.RELEASE_ADDS }}
      if: matrix.os == 'windows-latest'

    - name: Create archive for Linux
      run: 7z a -ttar -so -an ./target/release/${{ env.RELEASE_BIN }} ${{ env.RELEASE_ADDS }} | 7z a -tgzip -si ./artifacts/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.build }}-${{ matrix.output_ending }}
      if: matrix.os == 'ubuntu-latest'

    - name: Install p7zip on MacOS
      # 7Zip not available on MacOS, install p7zip via homebrew.
      run: brew install p7zip
      if: matrix.os == 'macos-latest'
    
    - name: Create archive for MacOS
      run: 7z a -ttar -so -an ./target/release/${{ env.RELEASE_BIN }} ${{ env.RELEASE_ADDS }} | 7z a -tgzip -si ./artifacts/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.build }}-${{ matrix.output_ending }}
      if: matrix.os == 'macos-latest'

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: artifacts/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.build }}-${{ matrix.output_ending }}
        asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.build }}-${{ matrix.output_ending }}
        asset_content_type: ${{ matrix.type }}
